apply plugin: 'cpp'
apply plugin: 'visual-studio'

// Define the build model
model {
    // Dependencies
    repositories {
        libs(PrebuiltLibraries) {
            sdl2 {
				headers.srcDirs "libs/SDL2-2.0.5/include"
				binaries.withType(SharedLibraryBinary) {
					if (targetPlatform == platforms.x64) {
						sharedLibraryLinkFile = file("libs/SDL2-2.0.5/lib/x64/sdl2.lib")  
						sharedLibraryFile = file("libs/SDL2-2.0.5/lib/x64/sdl2.dll")    
					}
					else {
						sharedLibraryLinkFile = file("libs/SDL2-2.0.5/lib/x86/sdl2.lib")  
						sharedLibraryFile = file("libs/SDL2-2.0.5/lib/x86/sdl2.dll")  
					}
                }
            }	
			stb {
				headers.srcDirs "libs/stb"
            }
			rang {
				headers.srcDirs "libs/rang/includes"
            }
			json {
				headers.srcDirs "libs/json"
            }
			glm {
				headers.srcDirs "libs/glm"
            }
        }
    }
	
	// Targets
	buildTypes {
        Debug
        Release
    }
	
	// Configurations
	platforms {
        x86 {
            architecture "x86"
        }
        x64 {
            architecture "x86_64"
        }
    }
    
    // Artifacts
    components {
        // Disable all DLL compilation
        all {
            binaries.withType(SharedLibraryBinarySpec) {
                buildable = false
            }              
        }
		
		glad(NativeLibrarySpec) {
			
			targetPlatform "x86"
			targetPlatform "x64"
			
            sources {
                cpp {
                    source {
                        srcDirs "libs/glad/src"
                        include "**/*.cpp", "**/*.c"					
                    }
                    exportedHeaders {
                        srcDirs "libs/glad/include"
                        include "**/*.hpp", "**/*.h"
                    }	
                }
            }

            binaries.all {
                // Define toolchain-specific compiler and linker options
                if (toolChain in VisualCpp) {		

					// General
                    cppCompiler.args "/MT"
					cppCompiler.args "/EHsc"
					cppCompiler.args "/FS"
					
					if (buildType == buildTypes.Debug){
						linker.args "/DEBUG"
						cppCompiler.args "/DEBUG"
						cppCompiler.args "/Zi"
						cppCompiler.args "/MTd"
					}
					else
					{
						cppCompiler.args "/MT"
					}
                }
            }
        }
		
		imgui(NativeLibrarySpec) {
			
			targetPlatform "x86"
			targetPlatform "x64"
			
            sources {
                cpp {
                    source {
                        srcDirs "libs/imgui"
                        include "**/*.cpp"					
                    }
                    exportedHeaders {
                        srcDirs "libs/imgui"
                        include "**/*.hpp", "**/*.h"
                    }	
                }
            }

            binaries.all {
                // Define toolchain-specific compiler and linker options
                if (toolChain in VisualCpp) {		

					// General
                    cppCompiler.args "/MT"
					cppCompiler.args "/EHsc"
					cppCompiler.args "/FS"
					
					if (buildType == buildTypes.Debug){
						linker.args "/DEBUG"
						cppCompiler.args "/DEBUG"
						cppCompiler.args "/Zi"
						cppCompiler.args "/MTd"
					}
					else
					{
						cppCompiler.args "/MT"
					}
					
					lib library: "glad", linkage: "static"
					lib library: "sdl2", linkage: "shared"
                }
            }
        }

        wishbone(NativeExecutableSpec) {
			
			targetPlatform "x86"
			targetPlatform "x64"
			
            sources {
                cpp {
                    source {
                        srcDirs "src/cpp"
                        include "**/*.cpp"						
                    }
                    exportedHeaders {
                        srcDirs "src/headers"
                        include "**/*.hpp", "**/*.h"
                    }	
                }
            }

            binaries.all {
                // Define toolchain-specific compiler and linker options
                if (toolChain in VisualCpp) {		

					// General
                    cppCompiler.args "/MT"
					cppCompiler.args "/EHsc"
					cppCompiler.args "/FS"
					
					if (buildType == buildTypes.Debug){
						linker.args "/DEBUG"
						cppCompiler.args "/DEBUG"
						cppCompiler.args "/Zi"
						cppCompiler.args "/MTd"
						
					}
					else
					{
						cppCompiler.args "/MT" 
					}
					
					linker.args "/SUBSYSTEM:CONSOLE"
					
					cppCompiler.define "SDL_MAIN_HANDLED"
					cppCompiler.define "STB_IMAGE_IMPLEMENTATION"
					
					lib library: "sdl2", linkage: "shared"
					lib library: "glad", linkage: "static"
					lib library: "imgui", linkage: "static"
					lib library: "stb", linkage: "api"	
					lib library: "rang", linkage: "api"	
					lib library: "json", linkage: "api"	
					lib library: "glm", linkage: "api"	
                }
            }
        }
	}
	
	// Generate VS Files
	visualStudio {
        solutions.all {
            solutionFile.location = "vs/${name}.sln"
            solutionFile.withContent { TextProvider content ->
                content.asBuilder().insert(0, "# GENERATED FILE: DO NOT EDIT\n")
                //content.text = content.text.replaceAll("HideSolutionNode = FALSE", "HideSolutionNode = TRUE")
				
				content.text = content.text.replaceAll( "Microsoft Visual Studio Solution File, Format Version [0-9]+\\.[0-9]+",
															"Microsoft Visual Studio Solution File, Format Version 12.00")
            }
        }
		
		projects.all {
            projectFile.location = "vs/${name}.vcxproj"
			filtersFile.location = "vs/${name}.vcxproj.filters"
            projectFile.withXml {
                asNode().appendNode('PropertyGroup', [Label: 'Custom'])
                        .appendNode('ProjectDetails', "THIS PROJECT IS AUTO-GENERATED: ${project.name}")
				
				asNode().@ToolsVersion = "12.0"

				// Set platform toolset so you don't end up using VS2010 directories
				asNode().PropertyGroup.findAll({ it.@Label == 'Configuration' }).each { configNode -> configNode.appendNode("PlatformToolset", "v140")}
            }
        }
    }
}